#pragma once

#include "categories.hpp"

namespace helpme {
inline std::vector<Categories> categories = {
    Categories{"Command History",
               {"@Command History",
                "#Default execution path is stored in $PATH",
                "$./foo.sh",
                "#Execute file foo.sh in current directory",
                "$sudo !!",
                "#!! will append the last command to the current command",
                "$chmod + x !$",
                "#!$ is the last argument of the last command i.e.foo.sh",
                "CTRL-R",
                "#Bring up history search",
                "$history",
                "#List history",
                "$history -c",
                "#Clear history",
                "$history -a",
                "#Append to history",
                "!Tools like fzf are great searching history",
                "#Environmental Variables for history",
                " HISTSIZE",
                "#Number of commands to remember",
                " PROMPT_COMMAND= history -a",
                "#Append to history",
                "@Find binary files for a command.",
                "$type wget",
                "#Find the binary",
                "$which wget",
                "#Find the binary",
                "$whereis wget",
                "#Find the binary, source, and manual page files",
                "!man will provide further context for most commands",
                "$man wget",
                "#Find the manual page for wget"}},

    Categories{"Navigation",
               {"@Navigation",
                "$pwd",
                "#Print current directory path",
                "$ls",
                "#List directories",
                "$ls -a",
                "#List directories including hidden",
                "$ls -l",
                "#List directories in long form",
                "$stat foo",
                "#List size, created and modified timestamps for files",
                "$tree",
                "#Similiar to ls but shows directory tree",
                "$cd foo",
                "#Go to foo sub-directory",
                "$cd",
                "#Go to home directory",
                "$cd ~",
                "#Go to home directory",
                "$cd -",
                "#Go to last directory",
                "!lsd is an alternative for ls",
                "$lsd --tree --depth 2",
                "#Show directory tree",
                "!There are serveral tui filemanagers like ranger and lf"}},
    Categories{"Managing Directories",
               {"@Managing Directories",
                "$mkdir foo",
                "#Create a directory",
                "$mkdir foo bar",
                "#Create multiple directories",
                "$mkdir -p foo/bar",
                "#Create recursive directories",
                "$mkdir -p {foo,bar}/baz",
                "#Create multiple nested directories",
                "$cp -r foo bar",
                "#Copy directory recursively",
                "$mv foo bar",
                "#Move directory",
                "!rsync adds many features for handling files & directories",
                "$rsync -zv /foo /bar",
                "#Copy directory quickly if not changed",
                "$rm -r foo",
                "#Remove directory",
                "$rm -r --interactive=never foo",
                "#Remove directory without prompt",
                "$rm -rf",
                "#Remove directory forced"}},
    Categories{"Managing Files",
               {"@Managing Files",
                "$touch foo.txt",
                "#Create file or update existing files modified timestamp",
                "$touch foo.txt bar.txt",
                "#Create multiple files",
                "$touch {foo,bar}.txt",
                "#Create multiple files",
                "$touch test{1..3}",
                "#Create test1, test2 and test3 files",
                "$touch test{a..c}",
                "#Create testa, testb and testc files",
                "$cp foo.txt bar.txt",
                "#Copy file",
                "$mv foo.txt bar.txt",
                "#Move file",
                "$rsync -zv /foo.txt /bar",
                "#Copy file quickly if not changed",
                "$rm foo.txt",
                "#Delete file",
                "$rm -f foo.txt",
                "#Delete file, ignore nonexistent files and never prompt"}},
    Categories{"Standard Output",
               {
                   "@Standard Output",
                   "!Single quotes act as literals, double quotes interpolate",
                   "$echo 'foo bar'",
                   "#Print to standard output",
                   "$echo foo > bar.txt",
                   "#Overwrite file with content",
                   "$echo foo >> bar.txt",
                   "#Append to file with content",
                   "$ls exists 1> stdout.txt",
                   "#Redirect the standard output to a file",
                   "$ls noexist 2> stderror.txt",
                   "#Redirect the standard error output to a file",
                   "$ls 2>&1 > out.txt",
                   "#Redirect standard output and error to a file",
                   "$ls > /dev/null",
                   "#Discard standard output and error",
                   "$read foo",
                   "#Read from standard input and write to the variable foo",
                   "!printf is also available for more complex output",
                   "$printf '%s\\n' foo bar",
                   "#Special Characters are accesed with escape sequences",
                   "$echo -e '\\tfoo\\nbar'",
                   "#Print tab and newline",
                   "!The pipe | is used to connect commands",
                   "$echo 'pipe' | tr 'a-z' 'A-Z'",
                   "#Print pipe in uppercase",
               }},
    Categories{
        "Reading Files",
        {
            "$cat foo.txt",
            "#Print all contents",
            "!bat is decorated and syntax highlighted alternative to cat",
            "$less foo.txt",
            "#Print all contents",
            "$head foo.txt",
            "#Print top 10 lines of file",
            "$head -n 5 foo.txt",
            "#Print top 5 lines of file",
            "$tail foo.txt",
            "#Print bottom 10 lines of file",
            "$tail -n 5 foo.txt",
            "#Print bottom 5 lines of file",
            "$open foo.txt",
            "#Open file in the default editor",
            "$wc -w foo.txt",
            "#List number of lines words in the file",
            "$wc -l foo.txt",
            "#List number of lines in the file",
        }},
    Categories{
        "Permissions",
        {"@Permissions",
         "!File Permissions are bit assigned by owner, group and others",
         "#They are assigned as follows for read, write and execute",
         "7  - rwx 	111",
         "6  - rw- 	110",
         "5  - r-x 	101",
         "4  - r-- 	100",
         "3  - -wx 	011",
         "2  - -w- 	010",
         "1  - --x 	001",
         "0  - --- 	000",
         "",
         "@For a directory, execute means you can enter a directory.",
         "Owner 	Group 	Others 	Description",
         "6 	4 	4",
         "#User can read and write, everyone else can read (Default)",
         "7 	5 	5",
         "#User can read, write and execute, others can read and execute",
         "$ls -l /foo.sh",
         "#List file permissions",
         "$chmod 644 foo.sh",
         "#Set permissions to defaults",
         "$chmod +100 foo.sh",
         "#Add 1 to the user permission",
         "$chmod -100 foo.sh",
         "#Subtract 1 from the user permission",
         "$chmod u+x foo.sh",
         "#Give the user execute permission",
         "$chmod g+x foo.sh",
         "#Give the group execute permission",
         "$chmod u-x,g-x foo.sh",
         "#Take away the user and group execute permission",
         "$chmod u+x,g+x,o+x foo.sh",
         "#Give everybody execute permission",
         "$chmod a+x foo.sh",
         "#Give everybody execute permission",
         "$chmod +x foo.sh",
         "#Give everybody execute permission"}},
    Categories{"Finding Files",
               {"@Finding Files",
                "#Find a file",
                "$locate --ignore-case",
                "#Find a file and ignore case",
                "$locate f*.txt",
                "#Find a text file starting with 'f'",
                "$find doesn't use an index and is slow.",
                "$find /path -name foo.txt",
                "#Find a file",
                "$find /path -iname foo.txt",
                "#Find a file with case insensitive search",
                "$find /path -name *.txt",
                "#Find all text files",
                "$find /path -name foo.txt -delete",
                "#Find a file and delete it",
                "$find /path -name *.png -exec pngquant {}",
                "#Find all .png files and execute pngquant on it",
                "$find /path -type f -name foo.txt",
                "#Find a file",
                "$find /path -type d -name foo",
                "#Find a directory",
                "$find /path -type l -name foo.txt",
                "#Find a symbolic link",
                "$find /path -type f -mtime +30",
                "#Find files that haven't been modified in 30 days",
                "$find /path -type f -mtime +30 -delete",
                "#Delete files that haven't been modified in 30 days",
                "!fd can be a faster alternative to find",
                "$fd 'foo' /bar"}},
    Categories{"Find in Files",
               {"@Find in Files",
                "$grep 'foo' /bar.txt",
                "#Search for 'foo' in file 'bar.txt'",
                "$grep 'foo' /bar -r",
                "#Search for 'foo' in directory 'bar'",
                "$grep 'foo' /bar -R",
                "#Search for 'foo' in directory 'bar' including symbolic links",
                "$grep 'foo' /bar -l",
                "#Show only files that match",
                "$grep 'foo' /bar -L",
                "#Show only files that don't match",
                "$grep 'Foo' /bar -i",
                "#Case insensitive search",
                "$grep 'foo' /bar -x",
                "#Match the entire line",
                "$grep 'foo' /bar -C 1",
                "#Add N line of context above and below each search result",
                "$grep 'foo' /bar -v",
                "#Show only lines that don't match",
                "$grep 'foo' /bar -c",
                "#Count the number lines that match",
                "$grep 'foo' /bar -n",
                "#Add line numbers",
                "$grep 'foo' /bar --colour",
                "#Add colour to output",
                "$grep 'foo|bar' /baz -R",
                "#Search for 'foo' or 'bar' in directory 'baz'",
                "$grep -E 'foo|bar' /baz -R",
                "#Use regular expressions",
                "$egrep 'foo|bar' /baz -R",
                "#Use regular expressions"}},
    Categories{"Replace in Files",
               {"@Replace in Files", "$sed 's/fox/bear/g' foo.txt",
                "#Replace fox with bear in foo.txt and output to console",
                "$sed 's/fox/bear/gi' foo.txt",
                "#Replace fox (case insensitive) with bear in foo.txt",
                "$sed 's/red fox/blue bear/g' foo.txt",
                "#Replace red with blue and fox with bear in foo.txt",
                "$sed 's/fox/bear/g' foo.txt > bar.txt",
                "#Replace fox with bear in foo.txt and save in bar.txt",
                "$sed 's/fox/bear/g' foo.txt -i|--in-place",
                "#Replace fox with bear and overwrite foo.txt"}},
    Categories{"Symbolic Links",
               {"@Symbolic Links", "$ln -s foo bar",
                "#Create a link 'bar' to the 'foo' folder", "$ln -s -f foo bar",
                "#Overwrite an existing symbolic link 'bar'", "$ls -l",
                "#Show where symbolic links are pointing};"}},
    Categories{"Compressing Files",
               {"@Compressing Files",
                "@zip",
                "#Compresses one or more files into *.zip files.",
                "$zip foo.zip /bar.txt",
                "#Compress bar.txt into foo.zip",
                "$zip foo.zip /bar.txt /baz.txt",
                "#Compress bar.txt and baz.txt into foo.zip",
                "$zip foo.zip /{bar,baz}.txt",
                "#Compress bar.txt and baz.txt into foo.zip",
                "$zip -r foo.zip /bar",
                "#Compress directory bar into foo.zip",
                "@gzip",
                "#Compresses a single file into *.gz files.",
                "$gzip /bar.txt foo.gz",
                "#Compress bar.txt into foo.gz and then delete bar.txt",
                "$gzip -k /bar.txt foo.gz",
                "#Compress bar.txt into foo.gz",
                "@tar",
                "$tar -c",
                "#Compresses and combines  files into a single *.tar",
                "$tar -c -z -f foo.tgz /bar.txt /baz.txt",
                "#Compress bar.txt and baz.txt into foo.tgz",
                "$tar -c -z -f foo.tgz /{bar,baz}.txt",
                "#Compress bar.txt and baz.txt into foo.tgz",
                "$tar -c -z -f foo.tgz /bar",
                "#Compress directory bar into foo.tgz"}},
    Categories{
        "Decompressing Files",
        {"@Decompressing Files", "@zip", "$unzip foo.zip",
         "#Unzip foo.zip into current directory", "unzip foo.zip -d dir",
         "#Unzip foo.zip into directory dir", "@gunzip", "$gunzip foo.gz",
         "#Unzip foo.gz into current directory and delete foo.gz",
         "$gunzip -k foo.gz", "#Unzip foo.gz into current directory", "@tar",
         "$tar -x", "#Un-combine foo.tar into current directory",
         "$tar -x -z -f foo.tar.gz",
         "#Un-compress foo.tar.gz into current directory", "$tar -x -f foo.tar",
         "#Un-combine foo.tar into current directory"}},
    Categories{"Hardware",
               {"@Hardware",
                "$lsusb",
                "#List USB devices",
                "$lspci",
                "#List PCI hardware",
                "$lshw",
                "# List all hardware",
                "@Disk Usage",
                "$df",
                "#List disks, size, used and available space",
                "$df -h",
                "#List disks, size, used and available readable",
                "$du",
                "#List current directory, subdirectories and file sizes",
                "$du /foo/bar",
                "#List specified directory, subdirectories and file sizes",
                "$du -h",
                "#List subdirectories and file sizes in readable format",
                "$du -d 2",
                "#List subdirectories and file sizes within the max depth 2",
                "$du -d 0",
                "#List current directory size",
                "du -sh",
                "#List readable size",
                "@Memory Usage",
                "$free",
                "#Show memory usage",
                "$free -h",
                "#Show human readable memory usage",
                "$free -h --si",
                "#Show human readable memory usage in power of 1000",
                "$free -s 5",
                "#Show memory usage every 5 seconds"}},
    Categories{"Package Management",
               {
                   "@Package Management",
                   "@pacman",
                   "$pacman -S package",
                   "#Install package",
                   "$pacman -Sy",
                   "#Update package database",
                   "$pacman -R package",
                   "#Remove package",
                   "$pacman -U package",
                   "#Upgrade package",
                   "$pacman -Syu",
                   "#Update system",
                   "$pacman -Q",
                   "#List installed packages",
                   "$pacman -Qm",
                   "#List foreign package",
                   "$pacman -Qo",
                   "#List package that owns a file",
                   "$pacman -Rsn $(pacman -Qtdq)",
                   "#Remove orphaned packages",
                   "$reflector --latest 5 --country 'United States'",
                   "--sort rate --save /etc/pacman.d/mirrorlist",
                   "#Update mirrorlist",
                   "@apt",
                   "$apt-get update",
                   "#Update package database",
                   "$apt-get install package",
                   "#Install package",
                   "$apt-get remove package",
                   "#Remove package",
                   "@aptitude",
                   "$aptitude install package",
                   "#Install package",
                   "$aptitude remove package",
                   "#Remove package",
               }},
    Categories{"Shutdown and Reboot",
               {
                   "@Shutdown and Reboot",
                   "$shutdown -h now",
                   "#Shutdown and halt now",
                   "$shutdown +5 'Cya later'",
                   "#Shutdown in 5 minutes",
                   "$shutdown -r now",
                   "#Reboot",
                   "$shutdown -c",
                   "#Cancel a shutdown or reboot",
                   "$reboot",
                   "#Reboot now",
                   "$reboot -f",
                   "# Force a reboot",
                   "@systemd",
                   "$systemctl poweroff",
                   "#Shutdown",
                   "$systemctl reboot",
                   "#Reboot",
                   "$systemctl suspend",
                   "#Suspend",
                   "!Hibernate requires swap and resume hooks in kernel",
                   "$systemctl hibernate",
                   "#Hibernate",
               }},
    Categories{
        "Identifying Processes",
        {"@Identifying Processes",
         "!several variants of top exist like btop, nvtop ect...",
         "$top",
         "#List all processes interactively",
         "$htop",
         "#List all processes interactively",
         "$ps -e",
         "#List all processes",
         "$pidof foo",
         "#Return the PID of all foo processes",
         "$pgrep foo",
         "#Return the PID of all processes matching foo",
         "CTRL+z",
         "#Suspend a process running in the foreground",
         "$bg",
         "#Resume a suspended process and run in the background",
         "$fg",
         "#Bring the last background process to the foreground",
         "$fg 1",
         "#Bring the background process with the PID to the foreground",
         "$sleep 30 &",
         "#Sleep for 30 seconds and move the process into the background",
         "$jobs",
         "#List all background jobs",
         "$jobs -p",
         "#List all background jobs with their PID",
         "$lsof",
         "#List all open files and the process using them",
         "$lsof -itcp:4000",
         "#Return the process listening on port 4000"}},
    Categories{"Process Handling",
               {"@Process Priority",
                "$nice -n -20 foo",
                "#Change process priority by name",
                "$renice 20 PID",
                "#Change process priority by PID",
                "$ps -o ni PID",
                "#Return the process priority of PID",
                "@Killing Processes",
                "CTRL+C",
                "#Kill a process running in the foreground",
                "$kill PID",
                "#Shut down process by PID gracefully. Sends TERM signal.",
                "$kill -9 PID",
                "#Force shut down of process by PID. Sends SIGKILL signal.",
                "$pkill foo",
                "#Shut down process by name gracefully. Sends TERM signal.",
                "$pkill -9 foo",
                "#force shut down process by name. Sends SIGKILL signal.",
                "$killall foo",
                "#Kill all process with the specified name gracefully.",
                "$sudo kill -9 $(pgrep foo)",
                "#Kill all process with the specified name forcefully."}},
    Categories{"Time and Date",
               {
                   "@Time and Date",
                   "$timedatecltl status",
                   "#Show time information",
                   "$timedatecltl set-time '2020-01-01 00:00:00'",
                   "#Set date",
                   "$timedatectl list-timezones",
                   "#List timezones",
                   "$timedatecltl set-timezone UTC",
                   "#Set timezone",
                   "$timedatecltl set-ntp true",
                   "#Enable NTP",
                   "$systemctl enable systemd-timesyncd",
                   "#Enable systemd-timesyncd",
                   "$hwclock --systohc --localtime",
                   "#Set system clock to local time",
                   "$hwclock --systohc",
                   "#Set system clock to UTC",
               }},
    Categories{"Schedule Tasks",
               {
                   "@Schedule Tasks",
                   "#Creating systemd timers",
                   "@Service",
                   "$touch /etc/systemd/system/foo.service",
                   " [Unit]",
                   " Description=Foo",
                   " After=network.target",
                   " Start=always",
                   " ExecStart=/usr/bin/foo",
                   "",
                   " [Install]",
                   " WantedBy=multi-user.target",
                   "@Timer",
                   "$touch /etc/systemd/system/foo.timer",
                   " [Unit]",
                   " Description=Foo Timer",
                   " Unit=foo.service",
                   " OnUnitActiveSec=60s",
                   " OnUnitInactiveSec=60s",
                   " Persistent=true",
                   "",
                   " [Install]",
                   " WantedBy=multi-user.target",
                   "@Timer Types",
                   "OnCalendar = Mon ... Fri *-*-* 12:00:00",
                   "#Run the timer every weekday at 12:00:00",
                   "OnUnitActiveSec = 60s",
                   "#Run the timer every 60 seconds",
                   "OnBootSec = 60s",
                   "#Run 60s after boot",
                   "@Transient Timers",
                   "$systemd-run --on-active='2hours' --unit=foo.service",
                   "#Run a command once every 2 hours",
                   "@Unit Files",
                   "$systemd-analyze verify /etc/systemd/system/foo",
                   "#Verify the systemd unit file",
                   "$systemctl daemon-reload",
                   "#Reload the systemd daemon configuration",
                   "$systemctl enable foo.timer",
                   "#Enable the foo service to start at boot",
                   "$systemctl list-timers pattern",
                   "#List timers that match the pattern",
                   "$systemctl list-timers --state=STATE",
                   "#List timers that are in the specified state",
               }},
    Categories{
        "Https Requests",
        {"@Https Requests",
         "@curl",
         "$curl https://example.com",
         "#Return response body",
         "$curl -i https://example.com",
         "#Include status code and HTTP headers",
         "$curl -L https://example.com",
         "#Follow redirects",
         "$curl -o foo.txt https://example.com",
         "#Output to a text file",
         "$curl -H 'User-Agent: Foo' https://example.com",
         "#Add a HTTP header",
         "$curl -X POST -H 'Content-Type: json' -d '{'foo':'bar'}' Host",
         "#POST JSON",
         "$curl -X POST -H --data-urlencode foo='bar' http://example.com",
         "#POST URL Form Encoded",
         "@wget",
         "$wget https://example.com/file.txt .",
         "#Download a file to the current directory",
         "$wget -O|--output-document foo.txt https://example.com/file.txt",
         "#Output to a file with the specified name"}},
    Categories{
        "Network Troubleshooting",
        {"@Network Troubleshooting",
         "!Some commands may not come with your distribution",
         "$ping example.com",
         "#Send multiple ping requests using the ICMP protocol",
         "$ping -c 10 -i 5 example.com",
         "#Make 10 attempts, 5 seconds apart",
         "$ip addr",
         "#List IP addresses on the system",
         "$ip route show",
         "#Show IP addresses to router",
         "$netstat -i|--interfaces",
         "#List all network interfaces and in/out usage",
         "$netstat -l|--listening",
         "#List all open ports",
         "$traceroute example.com",
         "#List all servers the network traffic goes through",
         "$mtr -w|--report-wide example.com",
         "#Continually list all servers the network traffic goes through",
         "$mtr -r -w -c 100 example.com",
         "#Output a report that lists network traffic 100 times",
         "$nmap 0.0.0.0",
         "#Scan for the 1000 most common open ports on localhost",
         "$nmap 0.0.0.0 -p1-65535",
         "#Scan for open ports on localhost between 1 and 65535",
         "$nmap 192.168.4.3",
         "#Scan top 1000 common open ports on a remote IP address",
         "$nmap -sP 192.168.1.1/24",
         "#Discover all machines on the network by ping'ing them",
         "@Dns Troubleshooting",
         "$host example.com",
         "#Show the IPv4 and IPv6 addresses",
         "$dig example.com",
         "#Show complete DNS information",
         "$cat /etc/resolv.conf",
         "#resolv.conf lists nameservers"}},
    Categories{"Terminal Multiplexers",
               {
                   "@Terminal Multiplexers",
                   "#Start multiple terminal sessions. Active sessions persist",
                   "tmux is more modern than screen.",
                   "$tmux",
                   "#Start a new session (CTRL-b + d to detach)",
                   "$tmux ls",
                   "#List all sessions",
                   "$tmux attach -t 0",
               }},
    Categories{
        "Secure Shell",
        {"@Secure Shell", "$ssh hostname",
         "#Connect to hostname using your current user name with default",
         "SSH port 22", "$ssh -i foo.pem hostname",
         "#Connect to hostname using the identity file", "$ssh user@hostname",
         "#Connect to hostname using express user SSH port 22",
         "$ssh user@hostname -p 8765",
         "#Connect to hostname using the user over a custom port",
         "$ssh ssh://user@hostname:8765",
         "#Connect to hostname using the user over a custom port",
         "#Persistant defaults in ~/.ssh/config", "@Secure Copy",
         "$scp foo.txt ubuntu@hostname:/home/ubuntu",
         "#Copy foo.txt into the specified remote directory"}},
    Categories{"Shell Profile",
               {
                   "@Bash Profile",
                   "#bash - .bashrc",
                   "#zsh - .zshrc",

                   "@Customize Prompt",
                   " PS1='\\u@\\h:\\w\\$ '",
                   "\\h -- hostname till .",
                   "\\H -- hostname",
                   "\\u -- username",
                   "\\t -- 24h clock seconds",
                   "\\T -- 12h clock seconds",
                   "\\@ -- 12h am/pm",
                   "\\A -- 24h HH:MM",
                   "\\v -- bash version",
                   "\\w -- current working directory",

                   "$(dirs | rev | cut -d '/' -f1-2 | rev)",
                   "#Customize prompt to show current working directory",
                   "#Include functions or commands in the prompt",
                   "PS1='\\u@$(dirs | rev | cut -d '/' -f1-2 | rev)\\$ '",
                   "@Variables",
                   "FZF_DEFAULT_OPTS='--layout reverse'",
                   "FZF_DEFAULT_COMMAND='fd --type f'",
                   "@Bash Functions",
                   "#Always list directories after cd",
                   " function cd {",
                   "     builtin cd '$@' && ls",
                   " }",
                   " function fzf_history {",
                   "    local output opts script",
                   "    history -n",
                   "    opts='--height 40% --no-sort --border-label=History ",
                   "    --bind 'tab:toggle-down,btab:toggle-up'",
                   "     ${FZF_DEFAULT_OPTS} ${FZF_TOKYONIGHT}'",
                   "    output=$(fc -lnr 1 | FZF_DEFAULT_OPTS='$opts' fzf)",
                   "    READLINE_LINE=$(echo ${output})",
                   "    if [[ -z '$READLINE_POINT' ]]; then",
                   "      echo '$READLINE_LINE'",
                   "    else",
                   "      READLINE_POINT=0x7fffffff",
                   "    fi",
                   " }",
                   "@Bash Aliases",
                   "#Replace ls with lsd",
                   " alias ls='lsd'",
                   " alias lst='lsd --tree --depth 2'",
                   "#Prompt user before overwriting any files",
                   " alias cp='cp --interactive'",
                   " alias mv='mv --interactive'",
                   " alias rm='rm --interactive'",
                   "#Always show disk usage in a human readable format",
                   " alias df='df -h'",
                   " alias du='du -h'",
                   "@Bindings",
                   "bind -x '\"\\C-r\": fzf_history'",
                   "#Bind custom function to CTRL-r",
                   "bind -x '\"\\C-h\": bashquickhelp "
                   "${READLINE_LINE:0:$READLINE_POINT}'",
                   "#Bind bashquickhelp to CTRL-h",
               }},
    Categories{"Bash Scripting",
               {"@Bash Scripting",
                "@Variables",
                "",
                "#!/bin/bash",
                "",
                " foo=123",
                "#Initialize variable foo with 123",
                " declare -i foo=123",
                "#Initialize an integer foo with 123",
                " declare -r foo=123",
                "#Initialize readonly variable foo with 123",
                " echo $foo",
                "#Print variable foo",
                " echo ${foo}_'bar'",
                "#Print variable foo followed by _bar",
                " echo ${foo:-'default'}",
                "#Print variable foo if it exists otherwise print default",
                " export foo",
                "#Make foo available to child processes",
                " unset foo",
                "#Make foo unavailable to child processes",
                "@Environment Variables",
                "",
                " #!/bin/bash",
                "",
                " env",
                "#List all environment variables",
                " echo $PATH",
                "#Print PATH environment variable",
                " export FOO=Bar",
                "#Set an environment variable",
                "@Functions",
                "",
                "#!/bin/bash",
                "",
                " greet() {",
                "  local world = 'World'",
                "  echo '$1 $world'",
                "  return '$1 $world'",
                " }",
                " greet 'Hello'",
                " greeting=$(greet 'Hello')",
                "@Exit Codes",
                "",
                "#!/bin/bash",
                "",
                " exit 0",
                "#Exit the script successfully",
                " exit 1",
                "#Exit the script unsuccessfully",
                " echo $?",
                "#Print the last exit code",
                "@Conditional Statements",
                "@Boolean Operators",
                "",
                "    $foo - Is true",
                "    !$foo - Is false",
                "@Numeric Operators",
                "",
                "    -eq - Equals",
                "    -ne - Not equals",
                "    -gt - Greater than",
                "    -ge - Greater than or equal to",
                "    -lt - Less than",
                "    -le - Less than or equal to",
                "    -e foo.txt - Check file exists",
                "    -z foo - Check if variable exists",
                "@String Operators",
                "",
                "    = - Equals",
                "    == - Equals",
                "    -z - Is null",
                "    -n - Is not null",
                "    < - Is less than in ASCII alphabetical order",
                "    > - Is greater than in ASCII alphabetical order",
                "@If Statements",
                "",
                "",
                "#!/bin/bash",
                "",
                " if [[$foo = 'bar']]; then",
                "   echo 'one'",
                " elif [[$foo = 'bar']] || [[$foo = 'baz']]; then",
                "   echo 'two'",
                " elif [[$foo = 'ban']] && [[$USER = 'bat']]; then",
                "   echo 'three'",
                " else",
                "   echo 'four'",
                " fi",
                "@Inline If Statements",
                "",
                "",
                "#!/bin/bash",
                "",
                " [[ $USER = 'rehan' ]] && echo 'yes' || echo 'no'",
                "",
                "@While Loops",
                "",
                "#!/bin/bash",
                "",
                " declare -i counter",
                " counter=10",
                " while [$counter -gt 2]; do",
                "  echo The counter is $counter",
                "  counter=counter-1",
                " done",
                "@For Loops",
                "",
                "#!/bin/bash",
                "",
                " for i in {0..10..2}",
                "  do",
                "    echo 'Index: $i'",
                "  done",
                "",
                " for filename in file1 file2 file3",
                "  do",
                "    echo 'Content: ' >> $filename",
                "  done",
                "",
                " for filename in *;",
                "  do",
                "    echo 'Content: ' >> $filename",
                "  done",
                "@Case Statements",
                "",
                "#!/bin/bash",
                "",
                " echo 'What's the weather like tomorrow?'",
                " read weather",
                "",
                " case $weather in",
                "  sunny | warm ) echo 'Nice weather: ' $weather",
                "  ;;",
                "  cloudy | cool ) echo 'Not bad weather: ' $weather",
                "  ;;",
                "  rainy | cold ) echo 'Terrible weather: ' $weather",
                "  ;;",
                "  * ) echo 'Don't understand'",
                "  ;;",
                "  esac"}}};
}
